pipeline {
    agent any

    stages {
        stage('Get Code') {
            steps {
                git url: 'https://github.com/albertmenendezg/UNIR-CP1'
            }
        }

        stage('Unit & Rest Tests') {
            parallel {
                stage('Unit') {
                    agent {
                        label: 'unit'
                    }
                    steps {
                        script {
                            sh '''
                                PYTHONPATH=. pytest test/unit/ --junitxml=result-unit.xml
                            '''
                            junit 'result*.xml'
                        }
                    }
                }

                stage('Rest') {
                    agent {
                        label: 'rest'
                    }
                    steps {
                        script {
                            sh '''
                                export FLASK_APP=app.api

                                flask run --host=0.0.0.0 --port=5000 &
                                FLASK_PID=$!

                                java -jar wiremock-standalone-3.13.0.jar --port 9090 --root-dir test/wiremock &
                                MOCK_PID=$!

                                sleep 10
                                pytest test/rest --junitxml=result-rest.xml

                                kill $MOCK_PID
                                kill $FLASK_PID
                            '''
                        }
                    }
                }
            }
        }

        stage('Quality Tests') {
            parallel {
                stage('Static') {
                    agent {
                        label: 'static'
                    }
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh '''
                                flake8 --exit-zero --format=pylint app > flake8.out
                            '''
                            recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')],
                            qualityGates: [
                                [threshold: 8, type: 'TOTAL', unstable: true],
                                [threshold: 10, type: 'TOTAL', failure: true]
                            ]
                        }
                    }
                }
                
                stage('Security') {
                    agent {
                        label: 'security'
                    }
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh '''
                                bandit --exit-zero -r app -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                            '''
                            recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')],
                            qualityGates: [
                                [threshold: 2, type: 'TOTAL', unstable: true],
                                [threshold: 4, type: 'TOTAL', unstable: false]
                            ]
                        }
                    }
                }
                
                stage('Performance') {
                    agent {
                        label: 'performance'
                    }
                    steps {
                        sh '''
                            jmeter/bin/jmeter -n -t test/jmeter/flask.jmx -l flask.jtl
                        '''
                        perfReport sourceDataFiles: 'flask.jtl'
                    }
                }
            }
        }
    }
}
